'김진영이 듣도 못한 사람의 명단과, 보도 못한 사람의 명단이 주어질 때, 
듣도 보도 못한 사람의 명단을 구하는 프로그램을 작성하시오.'
가 문제인데,
듣도 못한 사람의 명단을 듣잡, 보도 못한 사람의 명단을 보잡이라 하자.
듣잡 사람을 본 수를 n, 보잡 사람을 본 수를 m이라 하자.
n, m 만큼 듣잡과 보잡을 차례로 입력 한 후, 교집합인 듣보잡을 추려낸다.
듣보잡의 수와 이름을 출력하면 된다.

처음에 코드를 써내려갈 때는(듣보잡_without set().py) 
n, m, 듣잡, 보잡 입력받고 리스트를 이용하였다.
중복되는 이름을 찾기 위해서 듣잡과 보잡의 리스트를 합치고 sort()를 이용하여 정렬하였다.
이때, 중복되는 이름이 있다면 순서 앞뒤에 동일이름이 있어야 한다.
이를 이용해, 배열의 요소를 차례로 들여다봤다. 
요소 앞뒤로 같은 이름이 있다면 그 요소는 따로 빼내서 새로운 배열에 저장하도록 했다.
이렇게 한다면 만약 그룹이 세개 이상일때는 안먹힐 것 같다. 
물론 세 그룹 다 포함되는 경우라면 if문 조건이 nonAll[k-1] == nonAll[k] and nonAll[k+1] == nonAll[k] 로 
바꾸면 되긴 하지만, 이는 뭔가 범용성(?)에서 좀 딸릴 듯 싶었다.
쨌든... 중복된거 뽑아둔 새로운 배열의 요소 개수와 요소를 출력하면 되도록 했다.

처음에 즉흥적으로 쭉 써내려가봤는데, 다 써보니까 이번거 또한 C같은 느낌이 나더라,...
다른 사람이 작성한 코드도 슥 읽어보았다. 대부분 다 집합이라는 걸 생각했던데, 그걸 set() 함수로 Directly 표현했더라.
나도 그래서 set() 함수를 이용하여 다시 작성해보았다.(듣보잡_with set().py)

[set() 함수 요약] (참고 : https://wikidocs.net/16044)
set은 수학에서 이야기하는 집합과 비슷합니다.
순서가 없고, 집합안에서는 unique한 값을 가집니다. 그리고 mutable 객체입니다. (mutable : 변하기 쉬운)
1. 선언 : 변수 = set(), 형 변환 : s = set([1,3,5,7]) (역 : s = list({1, 3, 5, 7}) *중복 값은 자동으로 제거*
2. 요소 존재 여부 판단 : 요소 in 집합
3. 요소 추가 : 집합.add(요소), 제거 : 집합.discard(요소) -> 연속적 제거 O or 집합.remove(요소) -> 연속적 제거 X
4. 합집합(|, union) 연산자 : a = {1, 2, 3}, b = {2, 3, 4, 5}, c = a | b = {1, 2, 3, 4, 5} 
                     or c = a.union(b)
5. 교집합(&, intersection) 연산자 : a = {1, 2, 3}, b = {2, 3, 4, 5}, c = a & b = {2, 3}
                                   or c = a.intersection(b)
6. 차집합(-, difference) 연산자 : a = {1, 2, 3}, b = {2, 3, 4, 5}, c = a - b = {1}
                                 or c = a.difference(b)

이와 같은 내용을 읽은 후 코드를 써보았다.
솔직히 처음 썼던 것이랑 로직은 별 차이 안나는거 같다.
교집합을 구하는 것에 대한 코드 다이어트였던 것 같다.
이름 입력 전에 저장할 변수를 리스트가 아니라 set()으로 하여 집합형식으로 선언했다.
for을 이용하여 요소 하나하나씩 비교하지 않고, 요약 5번 항목을 이용하여 간단하게 교집합을 구했다.
그 교집합을 정렬하고 조건에 맞게 출력하였다.

코드 다이어트를 하긴 했는데 생각보다 크게 된거같진 않다. 결과만 봤을때는 오히려 역효과인거 같기도하다..
