설탕 개수를 입력받고 5kg으로 최대한 나누고 그 나머지를 3kg으로 나눠서 계산하면 되는 상당히 심플해 보이는 문제다.
18 = 5+5+5+3, 4 = 3+1(3kg에 가득 안채워진다), 6 = 3+3, 9 = 3+3+3, 11 = 5+3+3 
-> 봉지를 다 채울 수 있게 생각해야한다. 

while 반복문을 사용, kg가 5의 배수가 될 때까지 무게를 3씩 빼가는 방식으로 생각할 수 있다.

5로 딱 나누어 떨어지면 5kg 봉지로만 구성된 것이므로 (무게 // 5)를 통해 봉지 개수를 구할 수 있다.
그렇지 않다면, 입력 받은 무게에서 3을 빼고 봉지의 개수를 하나씩 늘린다. 
이는 봉지의 남는 자리를 만들지 않게 하기 위해서이다.
ex) 19kg : 19-3=16, 3kg 봉지 1개 ->(while 반복) 16-3=13, 3kg 봉지 2개 ->(while 반복) 13-3=10, 10은 5의 배수이므로 5kg 봉지 2개
    ∴ 19kg는 5kg 봉지 2개 + 3kg 봉지 2개 로 나눠 담을 수 있다.
ex) 6kg : 6-3=3, 3kg 봉지 1개 ->(while 반복) 3-3=0, 3kg 봉지 2개 ->(while 반복) 0%5=0, 0//5=0 이므로 if 내부 진입 후 봉지 개수를 출력한다.

while문은 입력받은 sugar의 수가 0보다 같거나 클 때까지만 반복한다. 
weight값이 음수가 되면 설탕 봉지수가 입력받은 설탕 무게에 정확하게 나누어 떨어지지 않는 것이기 때문에 
weight 변수가 0보다 작아지면 아래 else문으로 내려가게 되고 -1을 출력한다.

처음에는 쉽게 받아드려졌는데 문제 이해를 상당히 잘못해서 갈아엎은거나 다름없다.
이 문제를 품으로서 그리디 알고리즘의 첫 시작이다.
그리디 알고리즘(Greedy Algorithm)은 탐욕 알고리즘이다.
말 그대로 '선택의 순간마다 당장 눈앞에 보이는 최적의 상황만을 쫓아 최종적인 해답에 도달' 하는 방법인데,
이 문제에서는 입력받은 무게를 '5로 나눠서 봉지 바로 만들 수 있니? 아니면 3kg씩 빼면서 봉지 하나 만들까?' 가
그리디 알고리즘이 적용된 방식이다.

[그리디 알고리즘 문제를 해결하는 방법]
1. 선택 절차(Selection Procedure): 현재 상태에서의 최적의 해답을 선택한다.
   -> '5로 나눠서 봉지 바로 만들 수 있니? 아니면 3kg씩 빼면서 봉지 하나 만들까?'
2. 적절성 검사(Feasibility Check): 선택된 해가 문제의 조건을 만족하는지 검사한다.
3. 해답 검사(Solution Check): 원래의 문제가 해결되었는지 검사하고, 해결되지 않았다면 선택 절차로 돌아가 위의 과정을 반복한다.
   -> while 문 이용한 이유!

이거는 내가 정확하게 나누어 떨어져아 한다는걸 까먹고 쓴 코드... 봉다리에 kg 남기고 넉넉잡아 들고갈 수 있도록 짰었음...
봉다리에 kg이 남으면 안된다.. 알차게 다 채워야 한다는 것. 
'정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지'

weight = int(input())
quentity_5kg = 0
quentity_3kg = 0

if weight < 5:
  print("-1")  
else:
  quentity_5kg = weight // 5
  rest_quentity_5kg = weight % 5
  if rest_quentity_5kg >= 1 and rest_quentity_5kg <= 3:
    quentity_3kg += 1
  elif rest_quentity_5kg == 4:
    quentity_3kg += 2
  print(quentity_5kg + quentity_3kg)
  
  
