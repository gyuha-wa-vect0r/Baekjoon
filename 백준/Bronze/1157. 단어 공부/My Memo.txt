이 문제는 단어를 리스트로 입력받고 인덱스를 조회하면서 알파벳 수 카운팅하여 딕셔너리 저장! 
카운팅 수 가장 큰 알파벳 대문자 출력하면 끝일 것이라 생각하고 문제를 풀어 나갔다...

이 문제를 풀면서 깜빡했던 파이썬 문법들이 있다.
1. if 문 조건에서 리스트 내부에 요소가 있는지 없는지 판별하기
   -> 리스트 안에 x가 있나요? : x in 리스트, 리스트 안에 x가 없나요? : x not in 리스트 
2. 문자 대소문자 바꿔치기
   -> 문자열.upper() : 소문자 -> 대문자, 문자열.lower() : 대문자 -> 소문자
3. if 문 조건에서 같다, 다르다 판별하기
   -> 같다 : ==, 다르다 : !=
4. 딕셔너리에서 최대 value의 key 출력하기
   -> dict = {'banana': 2, 'apple': 10, 'strawberry': 7}
      max_fruit = max(dict, key=dict.get)
      처럼 max(딕셔너리, key=딕셔너리.get) 방식을 써야한다.
5. 딕셔너리에서 최대 value 출력하기
   -> max_count = max(stack_alpha.values())
      처럼 max(딕셔너리의 모든 value) 방식을 써야한다.
6. 반복문에서 딕셔너리 써먹기
   -> 반복조건이 딕셔너리의 key일 때 : for key in 딕셔너리:, 
      반복조건이 딕셔너리의 value일 때 : for value in 딕셔너리.values():,
      반복조건이 딕셔너리의 key와 value일 때 : for key, value in 딕셔너리.items():

난 문제를 풀면서 뭔가 C 느낌나도록 코드를 쓴거같다고 느꼈다... 너무 풀어서 쓴 느낌이랄까나...
나의 생각대로 풀고 한번만에 정답이 되었다. 하지만 그 후로 다른사람들의 풀이를 봤는데, 상당하게 간결하더라...
파이썬만의 함수를 더 다양하게 이용했다. 다음과 같다.
words = input().upper() # 단어를 문자열로 입력받고
unique_words = list(set(words))  #  set() 함수를 이용하여 입력받은 문자열에서 중복값을 제거
                                   -> 이야... 이거만 해도 딕셔너리고 뭐건간에 다 필요없을듯 ㅋㅋㅋㅋㅋㅋ

# 입력받은 문자열에 같은 알파벳이 몇 개 있는지 숫자를 카운트해서 cnt_list 리스트에 추가한다. 
# 이 리스트에서의 숫자의 순서는 unique_words 리스트의 원소의 순서와 동일하다.
cnt_list = []
for x in unique_words :
    cnt = words.count(x)
    cnt_list.append(cnt)  # count 숫자를 리스트에 append

# 숫자 리스트에서 알파벳이 사용된 개수 중 가장 큰 수를 찾고서 해당 숫자가 1보다 크면 물음표를 출력한다. 
# 최댓값이 하나라면 숫자 리스트에서 가장 큰 수의 위치를 index 함수로 찾고서 unique_words 리스트에서 같은 인덱스에 위치한 문자열을 출력한다.
if cnt_list.count(max(cnt_list)) > 1 :  # count 숫자 최대값이 중복되면
    print('?')
else :
    max_index = cnt_list.index(max(cnt_list))  # count 숫자 최대값 인덱스(위치)
    print(unique_words[max_index])
    
 상당히 깔끔.
 이런 아이디어 기억 잘 해두자.,.
